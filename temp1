The core failure is: **`vite: command not found` even after `npm ci` and `npx vite --version`**, which means your frontend doesn’t actually have `vite` installed as a dependency in a way the build script can invoke it. Secondary noisy issues: missing `hostname` binary in the container.

### Immediate fixes

1. **Ensure `vite` is declared and locked**
   In `frontend/package.json` you need something like:

   ```json
   {
     "devDependencies": {
       "vite": "^5.0.0"
     },
     "scripts": {
       "build": "vite build",
       "test:e2e": "playwright test"
     }
   }
   ```

   Then commit/update your lockfile and in CI the `npm ci` will install `vite` into `node_modules/.bin/vite` so `"npm run build"` can find it. Right now `npm ci` only installed 13 packages and the only binary present was `marked`, which implies `vite` isn’t in your declared deps/devDeps.

2. **Don’t rely on `npx vite` as a substitute for proper dependency installation**
   Your script’s fallback `npx vite --version` succeeded in downloading a transient `vite` binary, but the `npm run build` step still uses the local `node_modules/.bin/vite`. If you want a robust fallback, change the build invocation to:

   ```sh
   if command -v vite >/dev/null 2>&1; then
       npm run build
   else
       npx vite build
   fi
   ```

   But the *correct* solution is to have `vite` in `package.json` so `npm ci` installs it deterministically.

3. **Fix the missing `hostname` command in the CI container**
   The error `/app/test/run_tests.sh: line 6: hostname: command not found` comes from the base image lacking the `hostname` utility. On Fedora that lives in `hostname` package (provided by `iproute` or `hostname` itself). Modify your Dockerfile to install it:

   ```dockerfile
   RUN dnf update -y && dnf install -y \
       python3 \
       python3-pip \
       nodejs \
       npm \
       curl \
       hostname \
       && dnf clean all
   ```

   Or install `iproute` which provides `hostname`:

   ```dockerfile
   RUN dnf install -y iproute
   ```

### Recommended Dockerfile improvements (for stability / caching / Node version)

Replace the system `nodejs`/`npm` with a controlled Node.js distribution (system packages on Fedora can be outdated or cause subtle incompatibilities):

```dockerfile
# example snippet to install Node.js 22.x from NodeSource
RUN curl -fsSL https://rpm.nodesource.com/setup_22.x | bash - && \
    dnf install -y nodejs

# rest follows...
```

Also:

* Move frontend `COPY`/`npm ci` after copying `package.json` and `package-lock.json` (you already do that, just ensure both are present and in sync).
* Ensure `frontend/package-lock.json` is committed so `npm ci` is reproducible.
* Consider pinning `vite` version in package.json to avoid surprises across environments.

### Suggested adjustment to your E2E wrapper (snippet to guard build failure and show why vite is missing):

Add before building:

```bash
# verify vite is installed locally
if [ ! -x "node_modules/.bin/vite" ]; then
    echo "ERROR: vite binary missing after npm ci. Contents of node_modules/.bin:"
    ls -al node_modules/.bin
    echo "Listing frontend/package.json devDependencies:"
    jq '.devDependencies' package.json || true
    exit 1
fi
```

(You can remove `jq` if not installed; the point is to surface whether `vite` is declared.)

### Summary of what to do next

* Add `vite` to `frontend/package.json` (devDependencies), commit `package-lock.json`.
* Ensure CI runs `npm ci` in frontend and installs it (verify by listing `node_modules/.bin/vite`).
* Optionally harden build script to fallback to `npx vite build` if local is missing, but treat that as a non-deterministic fallback.
* Install `hostname` in the container to silence that error.
* (Optional but recommended) Use NodeSource to control Node version instead of Fedora’s stock `nodejs`.

If you’d like, I can:

* Give you a minimal commit-ready patch for `package.json` and the build-wrapper.
* Produce an updated Dockerfile snippet that replaces system Node with NodeSource 22.x and includes health endpoint support.
  Which one should I do first?
