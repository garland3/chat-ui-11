# Test-specific Dockerfile with Playwright and all testing dependencies
FROM ubuntu:24.04

# Set working directory
WORKDIR /app

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Install system dependencies excluding Node.js (we'll install newer version)
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-venv \
    curl \
    hostname \
    sudo \
    wget \
    ca-certificates \
    fonts-liberation \
    dos2unix \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x from NodeSource repository
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
    apt-get install -y nodejs

# Install uv for better Python dependency management
RUN curl -LsSf https://astral.sh/uv/install.sh | sh && \
    mkdir -p /root/.local/bin
ENV PATH="/root/.local/bin:$PATH"

# Copy requirements first
COPY requirements.txt .

# Copy and install frontend dependencies (keep all dependencies for testing)
COPY frontend3/package*.json ./frontend3/
WORKDIR /app/frontend3
ENV NPM_CONFIG_CACHE=/app/.npm
# Install ALL dependencies including devDependencies needed for testing
RUN npm ci --include=dev

# Build frontend (but keep node_modules for testing)
COPY frontend3/ .
RUN npm run build
# DO NOT remove node_modules - we need them for testing

# Switch back to app directory and copy backend code
WORKDIR /app
COPY backend/ ./backend/

# Copy other necessary files
COPY backend/configfiles/llmconfig.yml ./backend/configfiles/
COPY docs/ ./docs/
COPY scripts/ ./scripts/
COPY test/ ./test/
COPY test_e2e/ ./test_e2e/

# Fix line endings for the entire app directory and set permissions BEFORE any npm/npx commands
RUN find /app -type f \( -name "*.js" -o -name "*.json" -o -name "*.sh" -o -name "*.md" -o -name "*.txt" -o -name "*.py" \) -exec dos2unix {} \;
RUN find /app -type f -name "*.sh" -exec chmod +x {} \;

# Install requests and beautifulsoup4 for simple E2E testing
RUN /home/appuser/.local/bin/uv pip install requests beautifulsoup4

# Switch back to app directory and create logs directory for the backend
WORKDIR /app
RUN mkdir -p /app/backend/logs

# Configure sudo for appuser (needed for Playwright browser installation)
RUN echo "appuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# Set up uv for appuser
RUN mkdir -p /home/appuser/.local/bin && \
    if [ -f "/root/.local/bin/uv" ]; then cp /root/.local/bin/uv /home/appuser/.local/bin/; fi && \
    mkdir -p /home/appuser/.cache && \
    chown -R appuser:appuser /home/appuser/.local /home/appuser/.cache

# Change ownership to non-root user
RUN chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# Set up Python environment as appuser
ENV PATH="/home/appuser/.local/bin:$PATH"
RUN /home/appuser/.local/bin/uv python install 3.12
RUN /home/appuser/.local/bin/uv venv venv --python 3.12
ENV VIRTUAL_ENV=/app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python dependencies using uv
RUN /home/appuser/.local/bin/uv pip install -r requirements.txt

# Playwright browsers will be installed during E2E test execution
# Skip pre-installing to simplify build process

# Set environment variables
ENV PYTHONPATH=/app
ENV NODE_ENV=test

# Expose port
EXPOSE 8000

# Default command runs tests
WORKDIR /app
CMD ["bash", "/app/test/run_tests.sh", "all"]